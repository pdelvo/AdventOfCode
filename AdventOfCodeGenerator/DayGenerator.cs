using Microsoft.CodeAnalysis;

using System.Linq;

namespace AdventOfCodeGenerator
{
    [Generator]
    public class DayGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            // Find the main method
            var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken);
            string[] days = context.Compilation.GetSymbolsWithName(x => x.StartsWith("Day"), SymbolFilter.Type).Where(x => !x.IsAbstract).Select(x=>x.Name).ToArray();

            string daysText = string.Join(", ", days.Select(x => "new " + x + "()"));

            // Build up the source code
            string source = $@"// <auto-generated/>
using System;
using AdventOfCode.Days;

namespace {mainMethod.ContainingNamespace.ToDisplayString()}
{{
    public static partial class {mainMethod.ContainingType.Name}
    {{
        public static Day[] Days {{ get; }} = [{daysText}];
    }}
}}
";
            var typeName = mainMethod.ContainingType.Name;

            // Add the source code to the compilation
            context.AddSource($"{typeName}.g.cs", source);
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            // No initialization required for this one
        }
    }
}
